version: '3.8'

services:
  elemta:
    image: elemta:config-security
    build:
      context: .
      dockerfile: Dockerfile
    container_name: elemta-node0
    restart: unless-stopped
    ports:
      - "2525:2525"  # SMTP server port
      - "8080:8080"  # Metrics endpoint
    volumes:
      - elemta_queue:/app/queue
      - elemta_logs:/app/logs
      # Disable plugins mount for now due to Docker file sharing issues
      # - ./plugins:/app/plugins:ro
    environment:
      - TZ=UTC
      - DEBUG=true
      - NODE_ID=0
      - TEST_MODE=true
      - ELEMTA_CONFIG_PATH=/app/config/elemta.toml
      - API_PORT=8081  # Used internally only
      - DELIVERY_HOST=elemta-dovecot
      - DELIVERY_PORT=2424
    # Security configuration for the container
    security_opt:
      - no-new-privileges:true
    user: "1001:1001"  # Run as non-root user (elemta)
    read_only: false  # Set to false as we need to write to /app/queue and /app/logs
    tmpfs:
      - /tmp
      - /var/tmp
    cap_drop:
      - ALL
    cap_add: []
    init: true
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2525"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - elemta_network
    depends_on:
      - elemta-clamav
      - elemta-rspamd
      - elemta-dovecot
      - elemta-ldap

  # elemta-api:
  #   image: python:3.9-slim
  #   container_name: elemta-api
  #   restart: unless-stopped
  #   ports:
  #     - "8081:8081"
  #   volumes:
  #     - ./scripts/api_server.py:/app/api_server.py
  #     - elemta_queue:/app/queue:ro
  #   environment:
  #     - API_PORT=8081
  #   command: >
  #     bash -c "apt-get update && apt-get install -y curl && 
  #     python3 /app/api_server.py"
  #   networks:
  #     - elemta_network
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3
  #     start_period: 15s

  elemta-web:
    image: elemta:config-security
    container_name: elemta-web
    restart: unless-stopped
    ports:
      - "8025:8025"  # Web UI port
    volumes:
      - elemta_queue:/app/queue:ro
      - elemta_logs:/app/logs:ro
      # Web files are now included in the Docker image
    environment:
      - TZ=UTC
      - NODE_ID=web
      - ELEMTA_CONFIG_PATH=/app/config/elemta.toml
    # Security configuration for the container
    security_opt:
      - no-new-privileges:true
    user: "1001:1001"  # Run as non-root user (elemta)
    read_only: false  # Set to false as we need to write to /app/queue and /app/logs
    tmpfs:
      - /tmp
      - /var/tmp
    cap_drop:
      - ALL
    cap_add: []
    entrypoint: []
    command: ["/app/elemta", "web", "--listen", "0.0.0.0:8025", "--auth-enabled", "--queue-dir", "/app/queue", "--web-root", "/app/web/static"]
    networks:
      - elemta_network
    depends_on:
      - elemta
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8025/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s

  elemta-clamav:
    image: clamav/clamav:latest
    container_name: elemta-clamav
    restart: unless-stopped
    networks:
      - elemta_network
    volumes:
      - clamav_data:/var/lib/clamav
    # ClamAV needs some capabilities for file operations
    cap_drop:
      - NET_RAW
      - NET_BIND_SERVICE
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "3310"]
      interval: 45s
      timeout: 15s
      retries: 5
      start_period: 180s

  elemta-rspamd:
    image: rspamd/rspamd:latest
    container_name: elemta-rspamd
    restart: unless-stopped
    networks:
      - elemta_network
    volumes:
      - rspamd_data:/var/lib/rspamd
      # Disable custom configuration for now to avoid Docker mount issues
      # - ./docker/rspamd/override.d/worker-controller.conf:/etc/rspamd/override.d/worker-controller.conf
      # - ./docker/rspamd/override.d/worker-proxy.conf:/etc/rspamd/override.d/worker-proxy.conf
      # - ./docker/rspamd/override.d/worker-normal.conf:/etc/rspamd/override.d/worker-normal.conf
      # - ./docker/rspamd/override.d/modules.conf:/etc/rspamd/override.d/modules.conf
      # - ./docker/rspamd/override.d/logging.conf:/etc/rspamd/override.d/logging.conf
      # - ./docker/rspamd/override.d/actions.conf:/etc/rspamd/override.d/actions.conf
    ports:
      - "11334:11334"  # Web interface
    # Rspamd needs some capabilities for network operations
    cap_drop:
      - NET_RAW
      - NET_BIND_SERVICE
    healthcheck:
      # Use pidof to check if rspamd is running
      test: ["CMD-SHELL", "pidof rspamd || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s
  
  elemta-ldap:
    image: osixia/openldap:latest
    container_name: elemta-ldap
    hostname: elemta-ldap
    ports:
      - "1389:389"     # LDAP port
      - "1636:636"     # LDAPS port  
    environment:
      - LDAP_ORGANISATION=Example Corp
      - LDAP_DOMAIN=example.com
      - LDAP_ADMIN_PASSWORD=admin
      - LDAP_BASE_DN=dc=example,dc=com
      - LDAP_TLS_VERIFY_CLIENT=never
      - LDAP_RFC2307BIS_SCHEMA=true
      - LDAP_REMOVE_CONFIG_AFTER_SETUP=true
      - LDAP_TLS=false
    volumes:
      - ldap_data:/var/lib/ldap
      - ldap_config:/etc/ldap/slapd.d
    networks:
      - elemta_network
    healthcheck:
      test: ["CMD", "ldapsearch", "-x", "-D", "cn=admin,dc=example,dc=com", "-w", "admin", "-b", "dc=example,dc=com", "-s", "base", "-LLL"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  elemta-dovecot:
    image: elemta_dovecot:latest
    build:
      context: ./docker/dovecot
      dockerfile: Dockerfile
    container_name: elemta-dovecot
    hostname: elemta-dovecot
    ports:
      - "14143:14143"  # IMAP port
      - "2424:2424"    # LMTP port
      - "4190:4190"    # ManageSieve port
    volumes:
      - dovecot_data:/var/mail
    networks:
      - elemta_network
    restart: unless-stopped
    depends_on:
      - elemta-ldap
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "14143"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
      
  # Post-startup configuration
  # elemta-setup:
  #   image: curlimages/curl:latest
  #   container_name: elemta-setup
  #   restart: "no"
  #   volumes:
  #     - ./scripts:/app/scripts:ro
  #   environment:
  #     - KIBANA_URL=http://elemta-kibana:5601
  #     - ELASTICSEARCH_URL=http://elemta-elasticsearch:9200
  #   networks:
  #     - elemta_network
  #     - monitoring_network
  #   depends_on:
  #     elemta-kibana:
  #       condition: service_healthy
  #     elemta-elasticsearch:
  #       condition: service_healthy
  #     elemta:
  #       condition: service_healthy
  #   command: >
  #     sh -c "
  #       echo 'ðŸš€ Elemta Post-Startup Configuration';
  #       echo '====================================';
  #       apk add --no-cache jq bash;
  #       sleep 15;
  #       echo 'ðŸ“Š Setting up Kibana Data Views...';
  #       /app/scripts/setup-kibana-data-views.sh;
  #       echo 'ðŸŽ‰ Setup complete!';
  #       echo 'ðŸ”— Access Kibana: http://localhost:5601';
  #     "

  # Monitoring services

  # prometheus:
  #   image: prom/prometheus:latest
  #   container_name: elemta-prometheus
  #   ports:
  #     - "9090:9090"
  #   volumes:
  #     - ./monitoring/prometheus:/etc/prometheus
  #     - prometheus_data:/prometheus
  #   command:
  #     - '--config.file=/etc/prometheus/prometheus.yml'
  #     - '--storage.tsdb.path=/prometheus'
  #   networks:
  #     - monitoring_network
  #   restart: unless-stopped
  #   healthcheck:
  #     test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3
  #     start_period: 20s

  # grafana:
  #   image: grafana/grafana:latest
  #   container_name: elemta-grafana
  #   ports:
  #     - "3000:3000"
  #   volumes:
  #     - grafana_data:/var/lib/grafana
  #     - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
  #     - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
  #   environment:
  #     - GF_SECURITY_ADMIN_USER=admin
  #     - GF_SECURITY_ADMIN_PASSWORD=elemta123
  #     - GF_USERS_ALLOW_SIGN_UP=false
  #   networks:
  #     - monitoring_network
  #   depends_on:
  #     - prometheus
  #   restart: unless-stopped
  #   healthcheck:
  #     test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/health"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3
  #     start_period: 10s

  # alertmanager:
  #   image: prom/alertmanager:latest
  #   container_name: elemta-alertmanager
  #   ports:
  #     - "9093:9093"
  #   volumes:
  #     - ./monitoring/alertmanager:/etc/alertmanager
  #     - alertmanager_data:/alertmanager
  #   command:
  #     - '--config.file=/etc/alertmanager/alertmanager.yml'
  #     - '--storage.path=/alertmanager'
  #   networks:
  #     - monitoring_network
  #   restart: unless-stopped
  #   healthcheck:
  #     test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9093/-/healthy"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3
  #     start_period: 20s

  # Webmail Interface
  elemta-roundcube:
    image: roundcube/roundcubemail:latest
    container_name: elemta-roundcube
    ports:
      - "8026:80"
    environment:
      - ROUNDCUBEMAIL_DB_TYPE=sqlite
      - ROUNDCUBEMAIL_SKIN=elastic
      - ROUNDCUBEMAIL_DEFAULT_HOST=elemta-dovecot
      - ROUNDCUBEMAIL_DEFAULT_PORT=14143
      - ROUNDCUBEMAIL_SMTP_SERVER=elemta
      - ROUNDCUBEMAIL_SMTP_PORT=2525
      - ROUNDCUBEMAIL_UPLOAD_MAX_FILESIZE=25M
      - ROUNDCUBEMAIL_ASPELL_ENABLE=true
    volumes:
      - roundcube_data:/var/roundcube
      # Disable custom config for now due to Docker file sharing issues
      # - ./docker/roundcube/config/config.inc.php:/var/roundcube/config/config.inc.php:ro
    networks:
      - elemta_network
    restart: unless-stopped
    depends_on:
      - elemta-dovecot
      - elemta
      - elemta-ldap
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s



  # Monitoring Stack

networks:
  elemta_network:
    driver: bridge

volumes:
  elemta_queue:
    driver: local
  elemta_logs:
    driver: local
  elemta_plugins:
    driver: local
  clamav_data:
    driver: local
  rspamd_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  alertmanager_data:
    driver: local
  dovecot_data:
    driver: local
  ldap_data:
    driver: local
  ldap_config:
    driver: local
  roundcube_data:
    driver: local