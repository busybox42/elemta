#!/usr/bin/env python3

import os
import sys
import json
import random
import string
import time
from datetime import datetime

# Queue directories
QUEUE_DIR = "/app/queue"
ACTIVE_DIR = os.path.join(QUEUE_DIR, "active")
DEFERRED_DIR = os.path.join(QUEUE_DIR, "deferred")
HELD_DIR = os.path.join(QUEUE_DIR, "held")
FAILED_DIR = os.path.join(QUEUE_DIR, "failed")
DATA_DIR = os.path.join(QUEUE_DIR, "data")

# Ensure queue directories exist
for d in [QUEUE_DIR, ACTIVE_DIR, DEFERRED_DIR, HELD_DIR, FAILED_DIR, DATA_DIR]:
    os.makedirs(d, exist_ok=True)

# Generate a random message ID
def generate_message_id():
    return ''.join(random.choices(string.ascii_letters + string.digits, k=20))

# Generate a random domain
def random_domain():
    domains = ["example.com", "test.org", "mail.net", "elemta.io", "smtp.dev"]
    return random.choice(domains)

# Generate a random email
def random_email():
    prefix = ''.join(random.choices(string.ascii_lowercase, k=8))
    return f"{prefix}@{random_domain()}"

# Create a message file
def create_message_file(queue_type, index):
    # Generate message details
    msg_id = generate_message_id()
    sender = random_email()
    recipient = random_email()
    subject = f"Test Message {queue_type}-{index}"
    timestamp = int(time.time())
    
    # Create message content
    message = f"""From: {sender}
To: {recipient}
Subject: {subject}
Message-ID: <{msg_id}@example.com>
Date: {datetime.now().strftime('%a, %d %b %Y %H:%M:%S %z')}

This is a test message {index} for the {queue_type} queue.
This message was generated by the Elemta queue simulator.
"""
    
    # Create data file
    with open(os.path.join(DATA_DIR, f"{msg_id}.eml"), "w") as f:
        f.write(message)
    
    # Create queue entry with metadata
    metadata = {
        "id": msg_id,
        "sender": sender,
        "recipients": [recipient],
        "created": timestamp,
        "last_attempt": timestamp,
        "attempts": index,
        "next_attempt": timestamp + 300,
        "size": len(message),
        "status": queue_type,
        "subject": subject
    }
    
    with open(os.path.join(os.path.join(QUEUE_DIR, queue_type), f"{msg_id}.meta"), "w") as f:
        json.dump(metadata, f, indent=2)
    
    print(f"Created {queue_type} message {index} with ID {msg_id}")
    return msg_id

# List messages in the queue
def list_queue():
    print("\nActive Queue:")
    for filename in os.listdir(ACTIVE_DIR):
        if filename.endswith(".meta"):
            with open(os.path.join(ACTIVE_DIR, filename), "r") as f:
                metadata = json.load(f)
                print(f"  {metadata['id']} - From: {metadata['sender']} - Subject: {metadata['subject']}")
    
    print("\nDeferred Queue:")
    for filename in os.listdir(DEFERRED_DIR):
        if filename.endswith(".meta"):
            with open(os.path.join(DEFERRED_DIR, filename), "r") as f:
                metadata = json.load(f)
                print(f"  {metadata['id']} - From: {metadata['sender']} - Subject: {metadata['subject']}")
    
    print("\nHeld Queue:")
    for filename in os.listdir(HELD_DIR):
        if filename.endswith(".meta"):
            with open(os.path.join(HELD_DIR, filename), "r") as f:
                metadata = json.load(f)
                print(f"  {metadata['id']} - From: {metadata['sender']} - Subject: {metadata['subject']}")
    
    print("\nFailed Queue:")
    for filename in os.listdir(FAILED_DIR):
        if filename.endswith(".meta"):
            with open(os.path.join(FAILED_DIR, filename), "r") as f:
                metadata = json.load(f)
                print(f"  {metadata['id']} - From: {metadata['sender']} - Subject: {metadata['subject']}")

# Show queue statistics
def show_stats():
    active_count = len([f for f in os.listdir(ACTIVE_DIR) if f.endswith(".meta")])
    deferred_count = len([f for f in os.listdir(DEFERRED_DIR) if f.endswith(".meta")])
    held_count = len([f for f in os.listdir(HELD_DIR) if f.endswith(".meta")])
    failed_count = len([f for f in os.listdir(FAILED_DIR) if f.endswith(".meta")])
    total_count = active_count + deferred_count + held_count + failed_count
    
    # Calculate data size
    data_size = 0
    for filename in os.listdir(DATA_DIR):
        if filename.endswith(".eml"):
            data_size += os.path.getsize(os.path.join(DATA_DIR, filename))
    
    print("\nQueue Statistics:")
    print(f"Active Messages:   {active_count}")
    print(f"Deferred Messages: {deferred_count}")
    print(f"Held Messages:     {held_count}")
    print(f"Failed Messages:   {failed_count}")
    print(f"Total Messages:    {total_count}")
    print(f"Data Size:         {data_size / (1024 * 1024):.2f} MB")

# Show message details
def show_message(msg_id):
    # Search for the message in all queues
    for queue_type in ["active", "deferred", "held", "failed"]:
        meta_file = os.path.join(os.path.join(QUEUE_DIR, queue_type), f"{msg_id}.meta")
        if os.path.exists(meta_file):
            with open(meta_file, "r") as f:
                metadata = json.load(f)
            
            data_file = os.path.join(DATA_DIR, f"{msg_id}.eml")
            if os.path.exists(data_file):
                with open(data_file, "r") as f:
                    data = f.read()
            else:
                data = "Message data not found"
            
            print(f"\nMessage ID: {msg_id}")
            print(f"Status: {metadata['status']}")
            print(f"From: {metadata['sender']}")
            print(f"To: {', '.join(metadata['recipients'])}")
            print(f"Subject: {metadata['subject']}")
            print(f"Created: {datetime.fromtimestamp(metadata['created']).strftime('%Y-%m-%d %H:%M:%S')}")
            print(f"Last Attempt: {datetime.fromtimestamp(metadata['last_attempt']).strftime('%Y-%m-%d %H:%M:%S')}")
            print(f"Next Attempt: {datetime.fromtimestamp(metadata['next_attempt']).strftime('%Y-%m-%d %H:%M:%S')}")
            print(f"Attempts: {metadata['attempts']}")
            print(f"Size: {metadata['size']} bytes")
            print("\nMessage Content:")
            print(data)
            return
    
    print(f"Message {msg_id} not found")

# Main function
def main():
    if len(sys.argv) < 2:
        print("Usage: python mock-queue.py <command> [args]")
        print("\nCommands:")
        print("  create <active> <deferred> <held> <failed>  Create queue entries")
        print("  list                                        List messages in the queue")
        print("  stats                                       Show queue statistics")
        print("  show <message-id>                           Show message details")
        print("  clear                                       Clear all queue entries")
        sys.exit(1)
    
    command = sys.argv[1]
    
    if command == "create":
        num_active = int(sys.argv[2]) if len(sys.argv) > 2 else 3
        num_deferred = int(sys.argv[3]) if len(sys.argv) > 3 else 2
        num_held = int(sys.argv[4]) if len(sys.argv) > 4 else 1
        num_failed = int(sys.argv[5]) if len(sys.argv) > 5 else 1
        
        print(f"Creating {num_active} active, {num_deferred} deferred, {num_held} held, and {num_failed} failed messages")
        
        for i in range(1, num_active + 1):
            create_message_file("active", i)
        
        for i in range(1, num_deferred + 1):
            create_message_file("deferred", i)
        
        for i in range(1, num_held + 1):
            create_message_file("held", i)
        
        for i in range(1, num_failed + 1):
            create_message_file("failed", i)
        
        show_stats()
    
    elif command == "list":
        list_queue()
    
    elif command == "stats":
        show_stats()
    
    elif command == "show":
        if len(sys.argv) < 3:
            print("Error: Missing message ID")
            sys.exit(1)
        
        show_message(sys.argv[2])
    
    elif command == "clear":
        for queue_type in ["active", "deferred", "held", "failed"]:
            for filename in os.listdir(os.path.join(QUEUE_DIR, queue_type)):
                if filename.endswith(".meta"):
                    os.remove(os.path.join(os.path.join(QUEUE_DIR, queue_type), filename))
        
        for filename in os.listdir(DATA_DIR):
            if filename.endswith(".eml"):
                os.remove(os.path.join(DATA_DIR, filename))
        
        print("Queue cleared")
    
    else:
        print(f"Unknown command: {command}")
        sys.exit(1)

if __name__ == "__main__":
    main() 