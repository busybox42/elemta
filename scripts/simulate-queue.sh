#!/bin/bash

# Script to simulate queue entries in the Elemta CLI container

# Colors for output
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

echo -e "${YELLOW}Simulating Queue Entries for Elemta${NC}"
echo "======================================"

# Number of messages to simulate
NUM_ACTIVE=${1:-3}
NUM_DEFERRED=${2:-2}
NUM_HELD=${3:-1}
NUM_FAILED=${4:-1}

# Check if the elemta-cli container is running
if ! docker ps | grep -q elemta-cli; then
    echo -e "${RED}Error: elemta-cli container is not running.${NC}"
    echo "Please start the container first."
    exit 1
fi

# Function to generate a random UUID
generate_uuid() {
    local uuid=""
    uuid=$(cat /dev/urandom | tr -dc 'a-f0-9' | fold -w 8 | head -n 1)
    uuid="${uuid}-$(cat /dev/urandom | tr -dc 'a-f0-9' | fold -w 4 | head -n 1)"
    uuid="${uuid}-$(cat /dev/urandom | tr -dc 'a-f0-9' | fold -w 4 | head -n 1)"
    uuid="${uuid}-$(cat /dev/urandom | tr -dc 'a-f0-9' | fold -w 4 | head -n 1)"
    uuid="${uuid}-$(cat /dev/urandom | tr -dc 'a-f0-9' | fold -w 12 | head -n 1)"
    echo "$uuid"
}

# Function to generate a random domain
random_domain() {
    local domains=("example.com" "test.org" "mail.net" "elemta.io" "smtp.dev")
    local random_index=$((RANDOM % 5))
    echo "${domains[$random_index]}"
}

# Function to generate a random email
random_email() {
    local prefix=$(cat /dev/urandom | tr -dc 'a-z' | fold -w 8 | head -n 1)
    echo "${prefix}@$(random_domain)"
}

# Function to create a message file
create_message_file() {
    local queue_type=$1
    local index=$2
    
    # Generate message details
    local msg_id=$(generate_uuid)
    local sender=$(random_email)
    local recipient=$(random_email)
    local subject="Test Message ${queue_type}-${index}"
    local timestamp=$(date +%s)
    local current_time=$(date -u +"%Y-%m-%dT%H:%M:%S.%NZ")
    local expiry_time=$(date -u -d "+7 days" +"%Y-%m-%dT%H:%M:%S.%NZ")
    
    # Create message content
    local message="From: ${sender}
To: ${recipient}
Subject: ${subject}
Message-ID: <${msg_id}@example.com>
Date: $(date -R)

This is a test message ${index} for the ${queue_type} queue.
This message was generated by the Elemta queue simulator.
"
    
    # Create message file in the container
    echo -e "${YELLOW}Creating ${queue_type} message ${index}...${NC}"
    
    # Create data file
    docker exec elemta-cli mkdir -p /app/queue/data
    echo "$message" | docker exec -i elemta-cli bash -c "cat > /app/queue/data/${msg_id}.eml"
    
    # Create queue entry with metadata
    docker exec elemta-cli mkdir -p /app/queue/${queue_type}
    
    # Create metadata JSON file
    local metadata="{\"id\":\"${msg_id}\",\"from\":\"${sender}\",\"to\":[\"${recipient}\"],\"status\":\"queued\",\"created_at\":\"${current_time}\",\"updated_at\":\"${current_time}\",\"size\":${#message},\"received_at\":\"${current_time}\",\"retry\":{\"attempts\":${index},\"last_attempt\":\"${current_time}\",\"next_attempt\":\"${current_time}\",\"last_error\":\"\"},\"priority\":1,\"queue_type\":\"${queue_type}\",\"retry_count\":${index},\"next_retry\":\"${current_time}\",\"last_error\":\"\",\"attempts\":[],\"delivery_status\":{\"${recipient}\":{\"status\":\"queued\",\"last_attempt\":\"${current_time}\",\"retry_count\":0,\"next_retry\":\"${current_time}\",\"dsn_sent\":false}},\"last_delivery_attempt\":\"${current_time}\",\"first_attempt_time\":\"${current_time}\",\"expiry_time\":\"${expiry_time}\",\"dsn\":false}"
    
    echo "$metadata" | docker exec -i elemta-cli bash -c "cat > /app/queue/${queue_type}/${msg_id}.json"
    
    echo -e "${GREEN}Created ${queue_type} message ${index} with ID ${msg_id}${NC}"
}

# Check queue before creating messages
echo -e "\n${YELLOW}Checking queue before creating messages:${NC}"
./scripts/elemta-cli.sh queue -config /app/config/elemta.toml stats

# Create active queue messages
echo -e "\n${YELLOW}Creating active queue messages...${NC}"
for i in $(seq 1 $NUM_ACTIVE); do
    create_message_file "active" $i
done

# Create deferred queue messages
echo -e "\n${YELLOW}Creating deferred queue messages...${NC}"
for i in $(seq 1 $NUM_DEFERRED); do
    create_message_file "deferred" $i
done

# Create held queue messages
echo -e "\n${YELLOW}Creating held queue messages...${NC}"
for i in $(seq 1 $NUM_HELD); do
    create_message_file "held" $i
done

# Create failed queue messages
echo -e "\n${YELLOW}Creating failed queue messages...${NC}"
for i in $(seq 1 $NUM_FAILED); do
    create_message_file "failed" $i
done

# Check queue after creating messages
echo -e "\n${YELLOW}Checking queue after creating messages:${NC}"
./scripts/elemta-cli.sh queue -config /app/config/elemta.toml stats

# List messages in the queue
echo -e "\n${YELLOW}Listing messages in the queue:${NC}"
./scripts/elemta-cli.sh queue -config /app/config/elemta.toml list

echo -e "\n${GREEN}Simulation complete!${NC}"
echo "You can now use the following commands to manage the queue:"
echo "  ./scripts/elemta-cli.sh queue list     - List all messages in the queue"
echo "  ./scripts/elemta-cli.sh queue stats    - Show queue statistics"
echo "  ./scripts/elemta-cli.sh queue view ID  - View details of a specific message" 