name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  GO_VERSION: '1.22'
  GOLANGCI_LINT_VERSION: 'v1.55'

jobs:
  # Code quality and linting
  lint:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Run gofmt check
        run: |
          if [ -n "$(gofmt -l .)" ]; then
            echo "Go code is not formatted:"
            gofmt -d .
            exit 1
          fi

      - name: Run goimports check
        run: |
          go install golang.org/x/tools/cmd/goimports@latest
          if [ -n "$(goimports -l .)" ]; then
            echo "Go imports are not formatted:"
            goimports -d .
            exit 1
          fi

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: ${{ env.GOLANGCI_LINT_VERSION }}
          args: --timeout=10m

  # Unit tests
  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download

      - name: Run unit tests
        run: |
          go test -v -race -coverprofile=coverage.out -covermode=atomic ./...

      - name: Generate coverage report
        run: |
          go tool cover -func=coverage.out -o=coverage.txt
          echo "## Test Coverage" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          cat coverage.txt >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          files: ./coverage.out
          flags: unittests
          name: codecov-umbrella

  # Security scanning
  security:
    name: Security Scanning
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Run Gosec Security Scanner
        uses: securego/gosec@master
        with:
          args: '-fmt sarif -out gosec.sarif ./...'

      - name: Upload Gosec results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: gosec.sarif

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: trivy-results.sarif

      - name: Run Nancy - Check for vulnerable dependencies
        run: |
          go install github.com/sonatype-nexus-community/nancy@latest
          go list -json -deps ./... | nancy sleuth

  # Build verification
  build:
    name: Build Verification
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [linux, darwin]
        arch: [amd64, arm64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Build binary
        env:
          GOOS: ${{ matrix.os }}
          GOARCH: ${{ matrix.arch }}
        run: |
          make build
          ls -lh bin/

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: elemta-${{ matrix.os }}-${{ matrix.arch }}
          path: bin/elemta
          retention-days: 7

  # Docker build and scan
  docker:
    name: Docker Build and Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: elemta:test
          cache-from: type=gha
          cache-to: type=gha,mode=max
          load: true

      - name: Run Trivy vulnerability scanner on image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'elemta:test'
          format: 'sarif'
          output: 'trivy-docker-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy Docker results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: trivy-docker-results.sarif

      - name: Test Docker image
        run: |
          docker run --rm elemta:test version

  # Integration tests
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: elemta_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Set up Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: Start Docker services
        run: |
          docker-compose -f deployments/compose/docker-compose-test.yml up -d
          sleep 30  # Wait for services to be ready

      - name: Run integration tests
        env:
          TEST_POSTGRES_HOST: localhost
          TEST_POSTGRES_PORT: 5432
          TEST_POSTGRES_USER: postgres
          TEST_POSTGRES_PASSWORD: testpass
          TEST_POSTGRES_DB: elemta_test
        run: |
          chmod +x tests/integration_test_suite.sh
          ./tests/integration_test_suite.sh

      - name: Check Docker logs on failure
        if: failure()
        run: |
          docker-compose -f deployments/compose/docker-compose-test.yml logs

      - name: Cleanup
        if: always()
        run: |
          docker-compose -f deployments/compose/docker-compose-test.yml down -v

  # Performance tests
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Python dependencies
        run: |
          pip install psutil requests

      - name: Set up Docker Compose
        run: |
          docker-compose -f deployments/compose/docker-compose.yml up -d
          sleep 30  # Wait for services to be ready

      - name: Run performance tests
        run: |
          chmod +x tests/performance/comprehensive_load_test.py
          python3 tests/performance/comprehensive_load_test.py

      - name: Upload performance report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: performance-report
          path: performance_report_*.json
          retention-days: 30

      - name: Cleanup
        if: always()
        run: |
          docker-compose -f deployments/compose/docker-compose.yml down -v

  # Dependency check
  dependencies:
    name: Dependency Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Check for outdated dependencies
        run: |
          go list -u -m -json all | jq -r 'select(.Update != null) | "\(.Path): \(.Version) -> \(.Update.Version)"' > outdated.txt
          if [ -s outdated.txt ]; then
            echo "## Outdated Dependencies" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            cat outdated.txt >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          fi

      - name: Verify dependencies
        run: |
          go mod verify
          go mod tidy
          if [ -n "$(git diff go.mod go.sum)" ]; then
            echo "go.mod or go.sum needs updating"
            git diff go.mod go.sum
            exit 1
          fi

  # Code quality metrics
  quality:
    name: Code Quality Metrics
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better analysis

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install gocyclo (cyclomatic complexity)
        run: go install github.com/fzipp/gocyclo/cmd/gocyclo@latest

      - name: Install gocognit (cognitive complexity)
        run: go install github.com/uudashr/gocognit/cmd/gocognit@latest

      - name: Run complexity analysis
        run: |
          echo "## Code Complexity Analysis" >> $GITHUB_STEP_SUMMARY
          echo "### High Cyclomatic Complexity (>15)" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          gocyclo -over 15 . >> $GITHUB_STEP_SUMMARY || true
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "### High Cognitive Complexity (>20)" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          gocognit -over 20 . >> $GITHUB_STEP_SUMMARY || true
          echo '```' >> $GITHUB_STEP_SUMMARY

      - name: Generate code statistics
        run: |
          echo "## Code Statistics" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "Total Go files: $(find . -name '*.go' -not -path './vendor/*' | wc -l)" >> $GITHUB_STEP_SUMMARY
          echo "Lines of code: $(find . -name '*.go' -not -path './vendor/*' -exec cat {} \; | wc -l)" >> $GITHUB_STEP_SUMMARY
          echo "Test files: $(find . -name '*_test.go' | wc -l)" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

