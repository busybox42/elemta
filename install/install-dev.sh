#!/bin/bash
# Elemta Development Environment Installer
# This script creates a clean development environment with demo users

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

print_header() {
    echo -e "${BLUE}================================${NC}"
    echo -e "${BLUE}  Elemta Dev Environment Setup  ${NC}"
    echo -e "${BLUE}================================${NC}"
    echo ""
}

print_success() {
    echo -e "${GREEN}✅ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}⚠️  $1${NC}"
}

print_error() {
    echo -e "${RED}❌ $1${NC}"
}

print_info() {
    echo -e "${BLUE}ℹ️  $1${NC}"
}

print_header

# Change to the parent directory (Elemta project root)
cd "$(dirname "$0")/.."

# Check if we're in the right directory
if [ ! -f "docker-compose.yml" ] || [ ! -f "generate-config-alt.sh" ]; then
    print_error "Not in Elemta directory. Please run this from the Elemta project root."
    exit 1
fi

# Check if .env already exists
if [ -f ".env" ]; then
    print_warning "A .env file already exists!"
    read -p "Do you want to overwrite it with dev configuration? (y/N): " overwrite
    if [[ ! $overwrite =~ ^[Yy]$ ]]; then
        print_info "Installation cancelled."
        exit 0
    fi
fi

print_info "Setting up Elemta development environment with demo users..."

# Stop any running containers
print_info "Stopping any running containers..."
docker-compose -f docker-compose.yml down 2>/dev/null || true

# Clean up old config
print_info "Cleaning up old configuration..."
rm -f config/elemta-generated.toml
rm -f .env

# Create .env file for development
print_info "Creating development .env configuration..."

cat > .env << 'EOF'
# Elemta Development Configuration
# Generated by install-dev.sh

# Server Configuration
ELEMTA_HOSTNAME=mail.example.com
ELEMTA_DOMAIN=example.com
ELEMTA_EMAIL=admin@example.com

# Environment Settings
TZ=UTC
DEBUG=true
TEST_MODE=true
NODE_ID=0

# Port Configuration
SMTP_PORT=25
SMTPS_PORT=465
SMTP_STARTTLS_PORT=587
IMAP_PORT=143
WEB_UI_PORT=8025
WEBMAIL_PORT=8026
HTTP_PORT=8080
METRICS_PORT=8080
API_PORT=8081

# Database Configuration
DB_HOST=postgres
DB_PORT=5432
DB_NAME=elemta
DB_USER=elemta
DB_PASSWORD=elemta123
DB_TYPE=sqlite

# LDAP Configuration
LDAP_HOST=ldap
LDAP_PORT=389
LDAP_BASE_DN=dc=example,dc=com
LDAP_ADMIN_DN=cn=admin,dc=example,dc=com
LDAP_ADMIN_PASSWORD=admin
LDAP_ORGANISATION=Example Organization
LDAP_DOMAIN=example.com

# Test User Configuration
TEST_USER=alan
TEST_PASSWORD=password123

# Let's Encrypt Configuration
LETSENCRYPT_ENABLED=false
LETSENCRYPT_STAGING=true
LETSENCRYPT_EMAIL=admin@example.com

# Logging Configuration
LOG_LEVEL=debug
LOG_FORMAT=text
LOG_FILE=/app/logs/elemta.log

# Monitoring Configuration
PROMETHEUS_PORT=9090
GRAFANA_PORT=3000
ELASTICSEARCH_PORT=9200
KIBANA_PORT=5601

# Delivery Configuration
DELIVERY_HOST=elemta-dovecot
DELIVERY_PORT=2424
DELIVERY_MODE=lmtp
DELIVERY_TIMEOUT=30

# Docker Configuration
DOCKER_IMAGE=elemta_node
DOCKER_TAG=latest

# Rspamd Configuration
RSPAMD_PORT=11334

# Queue Configuration
QUEUE_INTERVAL=10
QUEUE_WORKERS=5

# Metrics and HTTP Configuration
METRICS_ENABLED=true
HTTP_ENABLED=true
ACME_CHALLENGE=false

# Check Interval (24 hours in nanoseconds)
CHECK_INTERVAL_NANOS=86400000000000
EOF

print_success "Development .env configuration created"

# Generate self-signed certificates for development
print_info "Generating self-signed certificates for development..."
if [ ! -f "config/test.crt" ] || [ ! -f "config/test.key" ]; then
    openssl req -x509 -newkey rsa:4096 -keyout config/test.key -out config/test.crt -days 365 -nodes -subj "/C=US/ST=State/L=City/O=Organization/CN=mail.example.com" 2>/dev/null
    print_success "Self-signed certificates generated"
else
    print_info "Certificates already exist, skipping generation"
fi

# Create users.txt file with demo users
print_info "Creating demo users for authentication..."
mkdir -p config
cat > config/users.txt << 'EOF'
alan@example.com:password123
admin@example.com:admin123
test@example.com:test123
demo@example.com:demo123
EOF

print_success "Demo users created:"
echo "  - alan@example.com:password123"
echo "  - admin@example.com:admin123"
echo "  - test@example.com:test123"
echo "  - demo@example.com:demo123"

# Create working Elemta configuration
print_info "Creating Elemta configuration..."
cp config/elemta.toml config/elemta-generated.toml

# Update hostname and domain in the config
sed -i 's/hostname = "mail.example.com"/hostname = "mail.example.com"/' config/elemta-generated.toml
sed -i 's/local_domains = \["example.com", "mail.example.com", "localhost"\]/local_domains = ["example.com", "mail.example.com", "localhost"]/' config/elemta-generated.toml

print_success "Elemta configuration created"

# Build and start containers
print_info "Building and starting development containers..."
docker-compose -f docker-compose.yml --env-file .env up -d --build

# Wait for services to start
print_info "Waiting for services to start..."
sleep 15

# Check status
print_info "Checking service status..."
docker-compose -f docker-compose.yml ps

# Create LDAP users in the proper structure
print_info "Creating LDAP users in proper organizational structure..."

# Wait for LDAP to be ready
print_info "Waiting for LDAP service to be ready..."
sleep 10

# Create the people organizational unit
print_info "Creating ou=people organizational unit..."
docker exec -i elemta-ldap ldapadd -x -H ldap://localhost -D "cn=admin,dc=example,dc=com" -w admin << 'EOF' 2>/dev/null || true
dn: ou=people,dc=example,dc=com
objectClass: organizationalUnit
ou: people
description: People organizational unit
EOF

# Create demo users in the proper LDAP structure
print_info "Creating demo users in LDAP..."
docker exec -i elemta-ldap ldapadd -x -H ldap://localhost -D "cn=admin,dc=example,dc=com" -w admin << 'EOF' 2>/dev/null || true
dn: uid=demo,ou=people,dc=example,dc=com
uid: demo
cn: Demo User
sn: User
objectClass: top
objectClass: posixAccount
objectClass: inetOrgPerson
loginShell: /bin/bash
homeDirectory: /home/demo
uidNumber: 1000
gidNumber: 1000
userPassword: demo123
mail: demo@example.com
gecos: Demo User

dn: uid=alan,ou=people,dc=example,dc=com
uid: alan
cn: Alan User
sn: User
objectClass: top
objectClass: posixAccount
objectClass: inetOrgPerson
loginShell: /bin/bash
homeDirectory: /home/alan
uidNumber: 1001
gidNumber: 1001
userPassword: password123
mail: alan@example.com
gecos: Alan User

dn: uid=admin,ou=people,dc=example,dc=com
uid: admin
cn: Admin User
sn: User
objectClass: top
objectClass: posixAccount
objectClass: inetOrgPerson
loginShell: /bin/bash
homeDirectory: /home/admin
uidNumber: 1002
gidNumber: 1002
userPassword: admin123
mail: admin@example.com
gecos: Admin User

dn: uid=test,ou=people,dc=example,dc=com
uid: test
cn: Test User
sn: User
objectClass: top
objectClass: posixAccount
objectClass: inetOrgPerson
loginShell: /bin/bash
homeDirectory: /home/test
uidNumber: 1003
gidNumber: 1003
userPassword: test123
mail: test@example.com
gecos: Test User
EOF

print_success "LDAP users created successfully!"

# Restart Elemta to ensure it can connect to LDAP
print_info "Restarting Elemta to ensure LDAP connection..."
docker-compose -f docker-compose.yml restart elemta
sleep 10

# Show recent logs
print_info "Recent elemta logs:"
docker-compose -f docker-compose.yml logs --tail=10 elemta

# Test SMTP connection
print_info "Testing SMTP connection..."
if echo "QUIT" | nc localhost 2525 >/dev/null 2>&1; then
    print_success "SMTP service is responding"
else
    print_warning "SMTP service may still be starting up"
fi

# Test LDAP authentication with retry mechanism
print_info "Testing LDAP authentication..."
auth_success=false
for i in {1..10}; do
    print_info "Authentication test attempt $i/10..."
    if printf "EHLO test\nAUTH PLAIN %s\nQUIT\n" "$(printf '\0demo@example.com\0demo123' | base64)" | nc localhost 2525 2>/dev/null | grep -q "235 2.7.0 Authentication successful"; then
        print_success "LDAP authentication is working"
        auth_success=true
        break
    else
        print_info "Authentication not ready yet, waiting 5 seconds..."
        sleep 5
    fi
done

if [ "$auth_success" = false ]; then
    print_error "LDAP authentication failed after 10 attempts"
    print_info "This may be due to timing issues. Try running: docker-compose restart elemta"
    print_info "Then test manually with: make test-docker"
fi

echo ""
print_success "Development environment setup complete!"
echo ""
echo -e "${BLUE}📋 Development Environment Details:${NC}"
echo "  🌐 Domain: example.com"
echo "  📧 SMTP: localhost:2525"
echo "  🌍 Webmail: http://localhost:8026"
echo "  🔧 Web UI: http://localhost:8025"
echo "  📊 Metrics: http://localhost:8080/metrics"
echo "  🔍 API: http://localhost:8081"
echo ""
echo -e "${BLUE}👥 Demo Users:${NC}"
echo "  📧 alan@example.com (password: password123)"
echo "  📧 admin@example.com (password: admin123)"
echo "  📧 test@example.com (password: test123)"
echo "  📧 demo@example.com (password: demo123)"
echo ""
echo -e "${BLUE}🧪 Testing Commands:${NC}"
echo "  # Quick authentication test"
echo "  make test-auth"
echo ""
echo "  # Full test suite"
echo "  make test-docker"
echo ""
echo "  # Test SMTP connection"
echo "  echo 'QUIT' | nc localhost 2525"
echo ""
echo "  # Send test email"
echo "  echo -e 'EHLO test\\nMAIL FROM:<test@example.com>\\nRCPT TO:<alan@example.com>\\nDATA\\nSubject: Test\\n\\nHello from Elemta!\\n.\\nQUIT' | nc localhost 2525"
echo ""
echo "  # Check service status"
echo "  docker-compose -f docker-compose.yml ps"
echo ""
echo "  # View logs"
echo "  docker-compose -f docker-compose.yml logs -f elemta"
echo ""
echo -e "${BLUE}🔄 Management Commands:${NC}"
echo "  # Stop services"
echo "  docker-compose -f docker-compose.yml down"
echo ""
echo "  # Restart services"
echo "  make update-restart"
echo ""
echo "  # Update configuration"
echo "  make update"
echo ""
echo -e "${GREEN}🎉 Development environment is ready!${NC}"
echo -e "${YELLOW}💡 Tip: Use the demo users to test email functionality${NC}"
